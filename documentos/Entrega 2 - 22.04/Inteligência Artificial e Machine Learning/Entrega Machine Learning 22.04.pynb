{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1ea3c54e-2700-4538-bd21-8d6f21dbb9c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install pandas numpy scikit-learn tabulate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1b6d65d6-0ce7-4322-a593-d4a5dff7014a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RideID</th>\n",
       "      <th>LatOrigem</th>\n",
       "      <th>LongOrigem</th>\n",
       "      <th>CityOrigem</th>\n",
       "      <th>LatDestino</th>\n",
       "      <th>LongDestino</th>\n",
       "      <th>CityDestino</th>\n",
       "      <th>Distancia_KM</th>\n",
       "      <th>Estimatives</th>\n",
       "      <th>Updated</th>\n",
       "      <th>Dia</th>\n",
       "      <th>Horario</th>\n",
       "      <th>valor_uber</th>\n",
       "      <th>valor_pop99</th>\n",
       "      <th>valor_poupa99</th>\n",
       "      <th>valor_Comfort</th>\n",
       "      <th>dia_semana</th>\n",
       "      <th>hora</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1183201</td>\n",
       "      <td>-274919.788</td>\n",
       "      <td>-48528287999999.898438</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-274371.486</td>\n",
       "      <td>-4839824309999.990234</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.19</td>\n",
       "      <td>{'Flash': 31.5, 'Comfort': 33.5, 'poupa99': 26...</td>\n",
       "      <td>2021-08-17 10:10:06.735871100</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>1900-01-01 10:10:06</td>\n",
       "      <td>31.5</td>\n",
       "      <td>29.14</td>\n",
       "      <td>26.91</td>\n",
       "      <td>33.5</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1183202</td>\n",
       "      <td>-198495.799</td>\n",
       "      <td>-44019915999999.898438</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-19936.899</td>\n",
       "      <td>-439401.603</td>\n",
       "      <td>Belo Horizonte</td>\n",
       "      <td>17.15</td>\n",
       "      <td>{'Moto': 25.5, 'Comfort': 44.0, 'UberFlash': 4...</td>\n",
       "      <td>2021-08-17 10:10:19.660182900</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>1900-01-01 10:10:19</td>\n",
       "      <td>42.0</td>\n",
       "      <td>74.80</td>\n",
       "      <td>74.80</td>\n",
       "      <td>44.0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1183204</td>\n",
       "      <td>-109198.019</td>\n",
       "      <td>-37077441799999.898438</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-109071.288</td>\n",
       "      <td>-370877.194</td>\n",
       "      <td>Aracaju</td>\n",
       "      <td>3.22</td>\n",
       "      <td>{'poupa99': 7.88, 'pop99': 7.88, 'turbo-taxi':...</td>\n",
       "      <td>2021-08-17 10:10:37.528390200</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>1900-01-01 10:10:37</td>\n",
       "      <td>7.5</td>\n",
       "      <td>7.88</td>\n",
       "      <td>7.88</td>\n",
       "      <td>9.5</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1183208</td>\n",
       "      <td>-198495.393</td>\n",
       "      <td>-440199.286</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-19936.899</td>\n",
       "      <td>-439401.603</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17.15</td>\n",
       "      <td>{'poupa99': 71.3, 'pop99': 71.3, 'turbo-taxi':...</td>\n",
       "      <td>2021-08-17 10:11:09.415673800</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>1900-01-01 10:11:09</td>\n",
       "      <td>42.0</td>\n",
       "      <td>71.30</td>\n",
       "      <td>71.30</td>\n",
       "      <td>44.0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1183211</td>\n",
       "      <td>-23743931699999.898438</td>\n",
       "      <td>-466083.953</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-236896.422</td>\n",
       "      <td>-4659155519999.990234</td>\n",
       "      <td>Diadema</td>\n",
       "      <td>14.78</td>\n",
       "      <td>{'poupa99': 40.43, 'pop99': 40.43, 'turbo-taxi...</td>\n",
       "      <td>2021-08-17 10:11:25.021341600</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>1900-01-01 10:11:25</td>\n",
       "      <td>27.5</td>\n",
       "      <td>40.43</td>\n",
       "      <td>40.43</td>\n",
       "      <td>40.0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1183214</td>\n",
       "      <td>-20559277599999.898438</td>\n",
       "      <td>-546231.586</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-204786.441</td>\n",
       "      <td>-546261.535</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.22</td>\n",
       "      <td>{'Flash': 38.5, 'poupa99': 18.1, 'turbo-taxi':...</td>\n",
       "      <td>2021-08-17 10:11:36.487865700</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>1900-01-01 10:11:36</td>\n",
       "      <td>38.5</td>\n",
       "      <td>18.10</td>\n",
       "      <td>18.10</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1183221</td>\n",
       "      <td>-23708.786</td>\n",
       "      <td>-465267.639</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-237047.254</td>\n",
       "      <td>-466175.221</td>\n",
       "      <td>Diadema</td>\n",
       "      <td>13.02</td>\n",
       "      <td>{'poupa99': 31.98, 'turbo-taxi': 57.46, 'regul...</td>\n",
       "      <td>2021-08-17 10:13:14.316337800</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>1900-01-01 10:13:14</td>\n",
       "      <td>49.5</td>\n",
       "      <td>31.98</td>\n",
       "      <td>31.98</td>\n",
       "      <td>74.5</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>1183223</td>\n",
       "      <td>-160386.142</td>\n",
       "      <td>-480188.949</td>\n",
       "      <td>Brasília</td>\n",
       "      <td>-16068.436</td>\n",
       "      <td>-479852.555</td>\n",
       "      <td>Valparaíso de Goiás</td>\n",
       "      <td>10.19</td>\n",
       "      <td>{'poupa99': 17.74, 'pop99': 17.74, 'turbo-taxi...</td>\n",
       "      <td>2021-08-17 10:13:49.998431700</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>1900-01-01 10:13:49</td>\n",
       "      <td>16.0</td>\n",
       "      <td>17.74</td>\n",
       "      <td>17.74</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>1183224</td>\n",
       "      <td>-227786.199</td>\n",
       "      <td>-433193.931</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-227923.134</td>\n",
       "      <td>-433.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.93</td>\n",
       "      <td>{'poupa99': 10.76, 'pop99': 10.76, 'turbo-taxi...</td>\n",
       "      <td>2021-08-17 10:13:49.951794400</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>1900-01-01 10:13:49</td>\n",
       "      <td>10.5</td>\n",
       "      <td>10.76</td>\n",
       "      <td>10.76</td>\n",
       "      <td>13.5</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1183225</td>\n",
       "      <td>-237088.701</td>\n",
       "      <td>-46526.664</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-237047.254</td>\n",
       "      <td>-466175.221</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.03</td>\n",
       "      <td>{'UberX': 48.5, 'poupa99': 33.84, 'pop99': 33....</td>\n",
       "      <td>2021-08-17 10:13:53.799629800</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>1900-01-01 10:13:53</td>\n",
       "      <td>48.5</td>\n",
       "      <td>33.84</td>\n",
       "      <td>33.84</td>\n",
       "      <td>73.5</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     RideID              LatOrigem             LongOrigem CityOrigem  \\\n",
       "0   1183201            -274919.788 -48528287999999.898438        NaN   \n",
       "1   1183202            -198495.799 -44019915999999.898438        NaN   \n",
       "3   1183204            -109198.019 -37077441799999.898438        NaN   \n",
       "6   1183208            -198495.393            -440199.286        NaN   \n",
       "9   1183211 -23743931699999.898438            -466083.953        NaN   \n",
       "12  1183214 -20559277599999.898438            -546231.586        NaN   \n",
       "19  1183221             -23708.786            -465267.639        NaN   \n",
       "20  1183223            -160386.142            -480188.949   Brasília   \n",
       "21  1183224            -227786.199            -433193.931        NaN   \n",
       "22  1183225            -237088.701             -46526.664        NaN   \n",
       "\n",
       "    LatDestino           LongDestino          CityDestino  Distancia_KM  \\\n",
       "0  -274371.486 -4839824309999.990234                  NaN         18.19   \n",
       "1   -19936.899           -439401.603       Belo Horizonte         17.15   \n",
       "3  -109071.288           -370877.194              Aracaju          3.22   \n",
       "6   -19936.899           -439401.603                  NaN         17.15   \n",
       "9  -236896.422 -4659155519999.990234              Diadema         14.78   \n",
       "12 -204786.441           -546261.535                  NaN         13.22   \n",
       "19 -237047.254           -466175.221              Diadema         13.02   \n",
       "20  -16068.436           -479852.555  Valparaíso de Goiás         10.19   \n",
       "21 -227923.134                -433.0                  NaN          3.93   \n",
       "22 -237047.254           -466175.221                  NaN         13.03   \n",
       "\n",
       "                                          Estimatives  \\\n",
       "0   {'Flash': 31.5, 'Comfort': 33.5, 'poupa99': 26...   \n",
       "1   {'Moto': 25.5, 'Comfort': 44.0, 'UberFlash': 4...   \n",
       "3   {'poupa99': 7.88, 'pop99': 7.88, 'turbo-taxi':...   \n",
       "6   {'poupa99': 71.3, 'pop99': 71.3, 'turbo-taxi':...   \n",
       "9   {'poupa99': 40.43, 'pop99': 40.43, 'turbo-taxi...   \n",
       "12  {'Flash': 38.5, 'poupa99': 18.1, 'turbo-taxi':...   \n",
       "19  {'poupa99': 31.98, 'turbo-taxi': 57.46, 'regul...   \n",
       "20  {'poupa99': 17.74, 'pop99': 17.74, 'turbo-taxi...   \n",
       "21  {'poupa99': 10.76, 'pop99': 10.76, 'turbo-taxi...   \n",
       "22  {'UberX': 48.5, 'poupa99': 33.84, 'pop99': 33....   \n",
       "\n",
       "                          Updated      Dia             Horario  valor_uber  \\\n",
       "0   2021-08-17 10:10:06.735871100  Tuesday 1900-01-01 10:10:06        31.5   \n",
       "1   2021-08-17 10:10:19.660182900  Tuesday 1900-01-01 10:10:19        42.0   \n",
       "3   2021-08-17 10:10:37.528390200  Tuesday 1900-01-01 10:10:37         7.5   \n",
       "6   2021-08-17 10:11:09.415673800  Tuesday 1900-01-01 10:11:09        42.0   \n",
       "9   2021-08-17 10:11:25.021341600  Tuesday 1900-01-01 10:11:25        27.5   \n",
       "12  2021-08-17 10:11:36.487865700  Tuesday 1900-01-01 10:11:36        38.5   \n",
       "19  2021-08-17 10:13:14.316337800  Tuesday 1900-01-01 10:13:14        49.5   \n",
       "20  2021-08-17 10:13:49.998431700  Tuesday 1900-01-01 10:13:49        16.0   \n",
       "21  2021-08-17 10:13:49.951794400  Tuesday 1900-01-01 10:13:49        10.5   \n",
       "22  2021-08-17 10:13:53.799629800  Tuesday 1900-01-01 10:13:53        48.5   \n",
       "\n",
       "    valor_pop99  valor_poupa99  valor_Comfort  dia_semana  hora  \n",
       "0         29.14          26.91           33.5           1    10  \n",
       "1         74.80          74.80           44.0           1    10  \n",
       "3          7.88           7.88            9.5           1    10  \n",
       "6         71.30          71.30           44.0           1    10  \n",
       "9         40.43          40.43           40.0           1    10  \n",
       "12        18.10          18.10           38.0           1    10  \n",
       "19        31.98          31.98           74.5           1    10  \n",
       "20        17.74          17.74           22.0           1    10  \n",
       "21        10.76          10.76           13.5           1    10  \n",
       "22        33.84          33.84           73.5           1    10  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n",
      "MAE (Erro Absoluto Médio): 1.95\n",
      "RMSE (Raiz do Erro Quadrático Médio): 4.02\n",
      "R² (Coeficiente de Determinação): 0.9651\n"
     ]
    }
   ],
   "source": [
    "#PREDICAO DEFINITIVA\n",
    "import pandas as pd\n",
    "import ast\n",
    "import numpy as np\n",
    "from IPython.display import display\n",
    "import re\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "from math import radians, cos, sin, asin, sqrt\n",
    "\n",
    "# Carregar a planilha\n",
    "df = pd.read_csv('dados.csv')\n",
    "\n",
    "# Filtrar dados nulos em 'Estimatives'\n",
    "df = df[df['Estimatives'].notnull()].copy()\n",
    "\n",
    "# Verificar se 'Estimatives' está em string ou dict\n",
    "if isinstance(df['Estimatives'].iloc[0], str):\n",
    "    df['Estimatives'] = df['Estimatives'].apply(ast.literal_eval)\n",
    "\n",
    "# Extração dos valores de 'Estimatives' para novas colunas\n",
    "df['valor_uber'] = df['Estimatives'].apply(lambda x: x.get('UberX') if isinstance(x, dict) else np.nan)\n",
    "df['valor_pop99'] = df['Estimatives'].apply(lambda x: x.get('pop99') if isinstance(x, dict) else np.nan)\n",
    "df['valor_poupa99'] = df['Estimatives'].apply(lambda x: x.get('poupa99') if isinstance(x, dict) else np.nan)\n",
    "df['valor_Comfort'] = df['Estimatives'].apply(lambda x: x.get('Comfort') if isinstance(x, dict) else np.nan)\n",
    "\n",
    "# Remover linhas com valores nulos em qualquer uma das colunas de valor\n",
    "df = df.dropna(subset=['valor_uber', 'valor_pop99', 'valor_poupa99', 'valor_Comfort'])\n",
    "\n",
    "# Mapear os dias da semana\n",
    "dias_semana = {\n",
    "    'Monday': 0,\n",
    "    'Tuesday': 1,\n",
    "    'Wednesday': 2,\n",
    "    'Thursday': 3,\n",
    "    'Friday': 4,\n",
    "    'Saturday': 5,\n",
    "    'Sunday': 6\n",
    "}\n",
    "df['dia_semana'] = df['Dia'].map(dias_semana)\n",
    "\n",
    "# Converter horário e extrair a hora\n",
    "df['Horario'] = pd.to_datetime(df['Horario'], format='%H:%M:%S', errors='coerce')\n",
    "df['hora'] = df['Horario'].dt.hour\n",
    "\n",
    "def safe_convert_to_lat_long(value):\n",
    "    # Remover pontos\n",
    "    value = str(value).replace('.', '')\n",
    "\n",
    "    # Verificar se o valor não é vazio e se pode ser convertido\n",
    "    if value and value.strip() != '':\n",
    "        numeros_sem_ponto = value.replace('.', '')\n",
    "          # Coloca o último ponto no lugar certo (antes dos 3 últimos dígitos)\n",
    "        return float(re.sub(r'(\\d+)(\\d{3})$', r'\\1.\\2', numeros_sem_ponto))\n",
    "    else:\n",
    "        # Retornar um valor padrão, como 0, caso a célula esteja vazia ou inválida\n",
    "        return '0.000000'\n",
    "\n",
    "# Aplicar a função de conversão para todas as colunas de latitude e longitude\n",
    "df.loc[:, 'LatOrigem'] = df['LatOrigem'].apply(safe_convert_to_lat_long)\n",
    "df.loc[:, 'LongOrigem'] = df['LongOrigem'].apply(safe_convert_to_lat_long)\n",
    "df.loc[:, 'LatDestino'] = df['LatDestino'].apply(safe_convert_to_lat_long)\n",
    "df.loc[:, 'LongDestino'] = df['LongDestino'].apply(safe_convert_to_lat_long)\n",
    "print(display(df.head(10)))\n",
    "\n",
    "# Selecionar colunas de entrada (X) e saída (y)\n",
    "X = df[['Distancia_KM', 'hora', 'dia_semana', 'LatOrigem', 'LongOrigem', 'LatDestino', 'LongDestino', 'valor_Comfort', 'valor_poupa99', 'valor_pop99']]\n",
    "y = df['valor_uber']\n",
    "\n",
    "# Dividir os dados em treinamento e teste\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n",
    "\n",
    "# Treinar o modelo\n",
    "modelo = RandomForestRegressor()\n",
    "modelo.fit(X_train, y_train)\n",
    "\n",
    "# Fazer previsões\n",
    "y_pred = modelo.predict(X_test)\n",
    "\n",
    "# Calcular métricas\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "\n",
    "# Exibir resultados\n",
    "print(f\"MAE (Erro Absoluto Médio): {mae:.2f}\")\n",
    "print(f\"RMSE (Raiz do Erro Quadrático Médio): {rmse:.2f}\")\n",
    "print(f\"R² (Coeficiente de Determinação): {r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8e242ea-89df-4038-845a-7ec49a0533c6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
